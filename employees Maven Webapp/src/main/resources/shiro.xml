<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.3.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util-4.3.xsd">
<!--  
++++++++++++++++++++++++++++++

shiro 

++++++++++++++++++++++++++++++
-->

<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="sessionMode" value="native"/>
         <property name="sessionManager" ref="sessionManager"/>        
         <property name="authenticator" ref="authenticator"/>
         <property name="authorizer" ref="authorizer"/>
       <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- session id 生成管理器 -->
  <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
   <!-- 配置Session DAO的操作处理 -->
   <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
     <!-- 设置session缓存的名字，名字可以任意 -->
     <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
     <!-- 定义改Session DAO使用的ID生成器 -->
     <property name="sessionIdGenerator" ref="sessionIdGenerator"></property>
   </bean>
   <!-- 配置需要向cookie中保存数据的配置模板 -->
   <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
      <!-- Tomcat默认是使用JSESSIONID -->
      <constructor-arg value="mldn-session-id"/>
      <!-- 保证不受到跨域的脚本影响 -->
      <property name="httpOnly" value="true"/>
      <!-- 定义cookie的过期时间，单位为秒 -->
      <property name="maxAge" value="100000"/>
   </bean>

<!-- 定义会话管理器的操作 -->
    <bean id="sessionManager"
        class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置 -->
        <property name="globalSessionTimeout" value="500000"/>
        <!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 定义要使用的无效的Session定时调度器 -->
       <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- 需要让此session可以使用该定时调度器进行检测 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 定义Session可以进行序列化的工具类 -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!-- 定义sessionIdCookie模版可以进行操作的启用 -->
        <property name="sessionIdCookieEnabled" value="true"/>
    </bean> 
   <!-- 配置session的定时验证检测程序类，让无效的session释放 -->
   
 <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
      <property name="sessionValidationInterval" value="30000"/>
     
      <!-- 定义有一个会话管理器的程序类引用 -->
      <property name="sessionManager" ref="sessionManager"/>
   </bean>
      <bean id="authorizer" class="org.apache.shiro.authz.ModularRealmAuthorizer">
        <property name="realms">
           <list>
             <ref bean="jdbcRealm"/>
         <!-- <ref bean="secondRealm"/>--> 
           </list>
         </property>
      </bean>
    <!-- 自定义认证器 -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
         <property name="realms">
           <list>
             <ref bean="jdbcRealm"/>
      <!--  <ref bean="secondRealm"/>-->  
           </list>
         </property>
         <property name="authenticationStrategy" ref="allSuccessfulStrategy"/>
    </bean>
   <bean id="jdbcRealm" class="com.emps.shiro.ShiroRealm">
     <property name="credentialsMatcher">
        <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
          <property name="hashAlgorithmName" value="MD5"/>
          <property name="hashIterations" value="1024"/>
        </bean>
     </property>
   </bean>
  <!--  <bean id="secondRealm" class="com.emps.shiro.SecondRealm">
      <property name="credentialsMatcher">
         <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
            <property name="hashAlgorithmName" value="SHA1"/>
            <property name="hashIterations" value="1204"/>
         </bean>
      </property>
   </bean>
    -->
   <bean id="allSuccessfulStrategy" class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.: -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!--
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
     -->
     <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated
         with a Subject for security checks. -->
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!--  rememberMeManager 管理器-->
     <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="cookie"></property>
     </bean>
     <!-- 记住我cookie --> 
     <bean id="cookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="maxAge" value="2592000"/>
     </bean>
    <!-- 自定义logoutFilter -->
   <bean id="LogoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
       <property name="redirectUrl" value="/login"></property>
    </bean>
    <bean id="formAuthenticationFilter" class="com.emps.filter.FormAuthenticationFilter"> 
      <property name="loginUrl" value="/login"/>
      <property name="usernameParam" value="user_name"/>
      <property name="passwordParam" value="password"/> 
      <property name="rememberMeParam" value="rememberMe"/>
  </bean>
  <!-- 角色 -->
   <bean id="role" class="com.emps.filter.RoleFilter"/>
   <bean id="permission" class="com.emps.filter.PermissionFilter"/>
   <bean  class="org.apache.shiro.web.filter.authz.RolesAuthorizationFilter"></bean>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/> 
        <property name="successUrl" value="/agent/success"/>
        <property name="unauthorizedUrl" value="/role/roleerror"/>
        
        <property name="filters">
           <util:map>
                <entry key="logout" value-ref="LogoutFilter"></entry>
                <entry key="authc" value-ref="formAuthenticationFilter"></entry>
              <entry key="roles" value-ref="role"></entry>   
                <entry key="perms" value-ref="permission"></entry>
          </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                
                /js/**  = anon
                /uploadify/** = anon
                /chart/** = anon
                /themes/** = anon
                /xheditor/** = anon 
                /agent/delete = roles[admin]
                /agent/update1 = authc,perms[user:create]
                /success.jsp=anon
                /index.jsp = anon
                /logout = logout
                /** = authc
            </value>
        </property>
    </bean>
 <!-- 
 <bean  id="simpleMappingExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
    <property name="exceptionMappings">
       <props>
         <prop key="org.apache.shiro.authz.UnauthorizedException">redirect:/role/roleerror</prop>  

       </props>
    </property>
</bean>
 --> 

</beans>